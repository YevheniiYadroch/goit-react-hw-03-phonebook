{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactListElement.jsx","components/ContactList/ContactList.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ContactForm","initialState","name","number","state","handleFormReset","setState","handleChange","e","currentTarget","value","this","className","onReset","onSubmit","props","onChange","htmlFor","type","id","pattern","title","required","Component","Filter","ContactListElement","ContactList","onDelete","map","item","onClick","App","contacts","filter","formChangeHandle","preventDefault","form","target","some","children","alert","prevValue","uuidv4","reset","searchHandle","dataset","prevProps","prevState","localStorage","setItem","JSON","stringify","parse","getItem","list","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f362bd1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ContactForm.css';\r\n\r\nclass ContactForm extends Component {\r\n    initialState = {\r\n        name: '',\r\n        number: ''\r\n    }\r\n    \r\n    state = this.initialState;\r\n\r\n    handleFormReset = () => {\r\n    this.setState(() => this.initialState)\r\n  }\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { name, number } = this.state;\r\n\r\n        return (\r\n            <form className=\"ContactForm\" onReset={this.handleFormReset} onSubmit={this.props.onChange}>\r\n                <label htmlFor=\"name\" className=\"ContactForm__name\">Name</label>\r\n                <input\r\n                    className=\"ContactForm__input\"\r\n                    value={name}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={this.handleChange}\r\n                />\r\n                <label htmlFor=\"number\" className=\"ContactForm__number\">\r\n                    Number\r\n                </label>\r\n                <input\r\n                    className=\"ContactForm__input\"\r\n                    value={number}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    id=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button type=\"submit\"  className=\"ContactForm__button\">Add contact</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactForm;","import React, { Component } from 'react';\r\nimport './Filter.css';\r\n\r\nclass Filter extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Filter\">\r\n                <h3 className=\"Filter__title\">Find contacts by name</h3>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"search\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    onChange={this.props.onChange}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nfunction ContactListElement({props}) {\r\n    return (\r\n        <p className=\"ContactList__text\" >{props.name}: {props.number}</p>\r\n    )\r\n    \r\n}\r\n\r\nexport default ContactListElement;","import React from 'react';\r\nimport ContactListElement from \"./ContactListElement\";\r\nimport './ContactList.css';\r\n\r\nfunction ContactList({props, onDelete}) {\r\n    return (\r\n        <ul className=\"ContactList\">\r\n            {props.map(item => (\r\n                <li className=\"ContactList__item\" key={item.id}>\r\n                    <ContactListElement props={item} />\r\n                    <button className=\"ContactList__button\" data-id={item.id} onClick={onDelete} type=\"button\">Delete</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n    \r\n}\r\n\r\nexport default ContactList;","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: [\n    {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    ],\n    filter: ''\n  }\n\n  formChangeHandle = e => {\n    e.preventDefault();\n    const form = e.target;\n    if (this.state.contacts.some(item => item.name === e.target.children.name.value)) {\n      return alert(`${e.target.children.name.value} is already in contacts`);\n    }\n    this.setState(prevValue => (\n      { contacts: [...prevValue.contacts, { id: uuidv4(), name: e.target.children.name.value, number: e.target.children.number.value}]}\n    ))\n    form.reset();\n  }\n\n  searchHandle = e => {\n    this.setState({ filter: e.currentTarget.value })\n  }\n\n  onDelete = e => {\n    this.setState(prevValue => (\n      {contacts: prevValue.contacts.filter(item => item.id !== e.target.dataset.id)}\n    ))\n  }\n\n  componentDidUpdate(prevProps, prevState ) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n    }\n  }\n\n  componentDidMount() {\n    const contacts = JSON.parse(localStorage.getItem('contacts'))\n    if (contacts !== null) {\n      this.setState({\n      contacts: contacts,\n      })\n    }\n  }\n\n  render() {\n    const list = this.state.contacts.filter(item => item.name.toLowerCase().includes(this.state.filter.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onChange={ this.formChangeHandle}/>\n        <h2>Contacts</h2>\n        <Filter onChange={this.searchHandle}/>\n        <ContactList props={list} onDelete={this.onDelete}/>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}